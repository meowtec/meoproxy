// Generated by typings
// Source: built/request.d.ts
declare module '~catro/built/request' {
    import * as http from 'http';
    import { EventEmitter } from 'events';
    import CertManager from '~catro/built/utils/cert';
    import { Request, Response, Logger } from '~catro/built/typed';
    export interface RequestHandlerOptions {
        protocol: string;
        req: http.IncomingMessage;
        res: http.ServerResponse;
        rejectUnauthorized: boolean;
        certManager: CertManager;
        logger: Logger;
    }
    export default class RequestHandler extends EventEmitter {
        protocol: string;
        req: http.IncomingMessage;
        res: http.ServerResponse;
        replaceRequest: (request: Request, requestHandler?: this) => Promise<Request> | Request;
        replaceResponse: (request: Response, requestHandler?: this) => Promise<Response> | Response;
        request: Request;
        response: Response;
        private willBeSent;
        private rejectUnauthorized;
        private certManager;
        private logger;
        constructor(options: RequestHandlerOptions);
        private initRequest();
        private start();
        private initResponse(response);
        private sendRequest(request);
        private sendResponse(response);
        private handleError(error);
        private returnError(code?);
        preventRequest(): void;
        url: string;
    }
}
declare module 'catro/built/request' {
    export * from '~catro/built/request';
    export { default } from '~catro/built/request';
}

// Generated by typings
// Source: built/utils/cert.d.ts
declare module '~catro/built/utils/cert' {
    import { Logger } from '~catro/built/typed';
    export interface KeyCertPair {
        key: Buffer;
        cert: Buffer;
    }
    export interface CertManagerOptions {
        rootPath: string;
        logger: Logger;
        customCA?: KeyCertPair;
        opensslPath?: string;
    }
    export default class CertManager {
        rootPath: string;
        logger: Logger;
        customCA: KeyCertPair;
        opensslPath: string;
        constructor(options: CertManagerOptions);
        CAKeyPath: string;
        CACertPath: string;
        private fullPath(name);
        private keyPath(name);
        private certPath(name);
        private setCustomCA(ca);
        private genCAKey();
        private genCACert();
        private genKey(domain);
        private genReq(domain);
        private genCert(domain);
        readCerts(domain: string): Promise<{
            key: Buffer;
            cert: Buffer;
        }>;
        CAExist(): Promise<Boolean>;
        getCerts(domain: string): Promise<KeyCertPair>;
        init(): Promise<this>;
    }
}
declare module 'catro/built/utils/cert' {
    export * from '~catro/built/utils/cert';
    export { default } from '~catro/built/utils/cert';
}

// Generated by typings
// Source: built/typed.d.ts
declare module '~catro/built/typed' {
    import { Readable } from 'stream';
    export interface Headers {
        [key: string]: string;
    }
    /**
     * Request is a superset of <http.requestOptions>
     */
    export interface Request {
        method: string;
        hostname: string;
        port: string;
        path: string;
        headers: Headers;
        body: Readable | string | Buffer;
    }
    export interface Response {
        status: number;
        headers: Headers;
        body: Readable | string | Buffer;
    }
    export interface Logger {
        info(...args: any[]): any;
        error(...args: any[]): any;
        warn(...args: any[]): any;
    }
    export interface LoggerFactory {
        (name: string): Logger;
    }
    export interface HttpsConnect {
        interrupt: boolean;
        hostname: string;
        port: number;
    }
}
declare module 'catro/built/typed' {
    export * from '~catro/built/typed';
}

// Generated by typings
// Source: built/index.d.ts
declare module '~catro/built/index' {
    import * as http from 'http';
    import { EventEmitter } from 'events';
    import RequestHandler from '~catro/built/request';
    import { KeyCertPair } from '~catro/built/utils/cert';
    import { Headers, Request, Response, HttpsConnect } from '~catro/built/typed';
    export interface Options {
        port: number;
        certPath?: string;
        https?: {
            (host: string): boolean;
        } | boolean;
        rejectUnauthorized?: boolean;
        ca?: KeyCertPair;
        openssl?: string;
    }
    export default class Proxy extends EventEmitter {
        httpServer: http.Server;
        private options;
        private httpsServerPool;
        private certManager;
        private creatLogger;
        private logger;
        constructor(options: Options);
        start(): Promise<this>;
        private initMainServer();
        private initHttpsServers();
        private handleRequest(protocol, req, res);
        private handleConnect(req, socket);
        CACertPath: string;
    }
    export { Headers, Request, Response, HttpsConnect };
    export type RequestHandler = RequestHandler;
}
declare module 'catro/built/index' {
    export * from '~catro/built/index';
    export { default } from '~catro/built/index';
}
declare module 'catro' {
    export * from '~catro/built/index';
    export { default } from '~catro/built/index';
}
